from sklearn.feature_extraction.text import TfidfVectorizer,CountVectorizer
import pandas as pd
import re
from GetMalwareFamily import IsMalwareFamily,GetMalwareFamily
import numpy as np

## 關鍵字萃取
def TfidfExtraction(df):
    print('[INFO]TFIDF Extration')
    articleList = df['Content'].tolist()
    df['keyWords'] = ''
    df['malware'] = ''
    Top_keywords_filter = [] ##每篇關鍵字暫存陣列

    for i in range(len(df)): ##讀取每篇文章並萃取關鍵字
        perArticleList = [articleList[i]]
        tfidf_model = TfidfVectorizer().fit(perArticleList)
        sparse_result = tfidf_model.transform(perArticleList)
        list_dense = sparse_result.todense().tolist()
        df_frequency = pd.DataFrame(list_dense,columns=tfidf_model.get_feature_names())
        key_words = df_frequency.iloc[0].sort_values(ascending=False).index[0:30] ##提取文章tfidf值為前三十的關鍵字
        for k in key_words:
            Top_keywords_filter.append(k)
        temp = 30 * i
        content = " ".join(Top_keywords_filter[temp:temp + 30]) ##list -> string 轉換
        df.loc[i, 'keyWords'] = content ##把每篇的關鍵字賦值進去DataFrame的每個row


        ##提取malware iotbot botnet etc...
        ##提取與惡意程式相關的關鍵字，後續可用來判斷是否為惡意程式相關文章

        malwareWords = re.findall('\w+ware|\w*bot\w*',content)
        if str(malwareWords) != '[]':
            finalMalwareWords = re.sub(r'software|hardware|aware', '', str(malwareWords))
            df.loc[i,'Malware'] = " ".join(set(finalMalwareWords))
    print('[INFO]keyWords Done')
    return df

def ComparingMalwareFamily(df): ##傳進來原本的dataframe 最後回傳新的malware dataframe

    ##開始比對惡意軟體家族

    print('[INFO]Comparing MalwareFamily')

    malwareFamily = []
    dic_Family = GetMalwareFamily()

    ##讀取每個row的keywords並判斷是否有惡意軟體家族

    for i, v in enumerate(df['keyWords']):
        for k in v.split():
            if (IsMalwareFamily(k.lower(), dic_Family) != -1):  # 不等於-1表示有找到
                #print(i, IsMalwareFamily(k.lower(), dic_Family), k)
                malwareFamily.append([i, k, IsMalwareFamily(k.lower(), dic_Family)])  # 第幾篇 / 關鍵字 / 第幾個惡意軟體家族
    df_Malware = pd.DataFrame(data=malwareFamily, columns=['Title', 'Malware', 'MalwareFamily'])
    df_Malware['Url'] = ''
    df_Malware['Stix'] = ''
    for i in range(len(df_Malware)):
        if (df.loc[int(df_Malware.iloc[i,0]),'stixUrl']!=''):
            df_Malware.loc[i,'Stix'] = df.loc[int(df_Malware.iloc[i,0]),'stixUrl']
        df_Malware.iloc[i, 3] = df.loc[int(df_Malware.iloc[i,0]),'Url'] ##Url
        df_Malware.iloc[i, 0] = df.loc[int(df_Malware.iloc[i,0]),'Title']  ## Title
        df_Malware.iloc[i, 2] = " ".join(dic_Family[df_Malware.iloc[i, 2]])
    print('[INFO]Comparing MalwareFamily done')

    print('[INFO]Malware Dataframe Reshape')
    ##預設需要的columns並調整DataFrame順序
    df_Malware['IP'] = ''
    df_Malware['Domain'] = ''
    df_Malware['Hash'] = ''
    df_Malware['CVE'] = ''
    df_Malware = df_Malware.iloc[:, [0, 1, 2, 4, 5, 6, 7, 8,3]]
    print('[INFO]Malware Dataframe done')
    return df_Malware